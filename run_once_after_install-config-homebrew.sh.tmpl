#!/usr/bin/env bash
set -eo pipefail


# Redirect all stdout to stderr
exec 1>&2

# Cleanup on script exit (success or crash)
cleanup() {
  if [[ -n "${KEEP_ALIVE_PID-}" ]]; then
    kill "$KEEP_ALIVE_PID" 2>/dev/null || true
  fi
  if [[ -n "${ASKPASS_SCRIPT-}" ]]; then
    rm -f "$ASKPASS_SCRIPT"
  fi
  unset SUDO_ASKPASS HOMEBREW_SUDO_PASSWORD || true
}
trap cleanup EXIT INT TERM

# Function to generate a timestamp for logs.
timestamp() {
    date '+%Y-%m-%d %H:%M:%S'
}

# Function for logging messages with timestamps.
Log() {
    echo "[$(timestamp)] LOG: $1"
}

# Function to log errors and exit.
exitOnError() {
    echo "[$(timestamp)] ERROR: $1"
    exit 1
}


# ------------------------
# Sudo Password Handling
# ------------------------
# Prompt once for your sudo password via a GUI dialog:
HOMEBREW_SUDO_PASSWORD=$(
  osascript \
    -e 'Tell application "System Events" to display dialog "Enter your sudo password for Homebrew operations:" default answer "" with hidden answer buttons {"OK"} default button "OK"' \
    -e 'text returned of result'
)

# Create a secure, temporary askpass helper that echoes that password:
ASKPASS_SCRIPT="$(mktemp)"
chmod 700 "$ASKPASS_SCRIPT"
cat <<EOF > "$ASKPASS_SCRIPT"
#!/usr/bin/env bash
# Askpass helper: echo the stored password (no further prompts)
printf "%s\n" "$HOMEBREW_SUDO_PASSWORD"
EOF

# Tell sudo to use our helper
export SUDO_ASKPASS="$ASKPASS_SCRIPT"

# Prime sudo (use -A to force askpass) so you get the GUI dialog only once
sudo -A -v

# Keep the credential alive until this script exits
{ while true; do sudo -n true; sleep 60; done } 2>/dev/null &
KEEP_ALIVE_PID=$!



# ------------------------
# Install Homebrew
# ------------------------
Log "Installing Homebrew..."
# Check if brew is available using command -v instead of executing brew.
if command -v brew; then
    Log "Homebrew is already installed."
else
    # Use an inverted condition so that a failure triggers exitOnError.
    if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
        exitOnError "Failed to install Homebrew."
    fi
    Log "Homebrew installed successfully."
fi


# -------------------------------------
# Install Homebrew Dependencies
# -------------------------------------

if [[ {{ .chezmoi.arch }} == "arm64" ]]; then
  Log "You're on Apple Silicon (ARM)"
  HOMEBREW_PATH="/opt/homebrew"
elif [[ {{ .chezmoi.arch }} == "amd64" ]]; then
  Log "You're on Intel"
  HOMEBREW_PATH="/usr/local"
else
  exitOnError "Unknown architecture"
fi

Log "Checking for Homebrew dependencies..."
if [ "$CI" = "true" ]; then
    # In CI mode, do not install packages, just list dependencies.
    Log "CI environment detected, listing Homebrew dependencies..."
    if $HOMEBREW_PATH/bin/brew bundle list --file="$HOME/.config/homebrew/Brewfile"; then
        Log "Brew bundle list executed successfully in CI environment."
    else
        exitOnError "Failed to list Homebrew dependencies from Brewfile in CI environment."
    fi
else
    # In non-CI, install the dependencies.
    Log "Installing Homebrew dependencies..."
    if $HOMEBREW_PATH/bin/brew bundle --file="$HOME/.config/homebrew/Brewfile"; then
        Log "Homebrew dependencies installed successfully."
    else
        Log "Failed to install Homebrew dependencies from Brewfile."
    fi
fi


# -------------------------------
# Load Homebrew Launchd Job
# -------------------------------
Log "Loading Homebrew launchd job..."
# Check if the launchd job is already loaded.
if launchctl list | grep -q "com.rhsjmm.chezmoi.brewfile"; then
    Log "Launchd job already loaded."
else
    # Load the launchd job if not already loaded.
    if launchctl load ~/Library/LaunchAgents/com.rhsjmm.chezmoi.brewfile.plist; then
        Log "Launchd job loaded successfully."
    else
        exitOnError "Failed to load launchd job: ~/Library/LaunchAgents/com.rhsjmm.chezmoi.brewfile.plist"
    fi
fi


cleanup
